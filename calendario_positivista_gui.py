import sysfrom PyQt5.QtWidgets import QApplication, QWidget, QLabel, QLineEdit, QPushButton, QVBoxLayout, QFormLayout, QRadioButton, QButtonGroupfrom datetime import datemeses_positivistas = [    "Moisés", "Homero", "Aristóteles", "Arquimedes", "César", "São Paulo",    "Carlos Magno", "Dante", "Gutenberg", "Shakespeare", "Descartes",    "Frederico II", "Bichat"]meses_gregorianos = [    "janeiro", "fevereiro", "março", "abril", "maio", "junho",    "julho", "agosto", "setembro", "outubro", "novembro", "dezembro"]def para_calendario_positivista(data_gregoriana):    """Converte uma data do calendário gregoriano para o calendário positivista."""    ano_positivista = data_gregoriana.year - 1791    mes_positivista = (data_gregoriana.month - 1) % 13    dia_positivista = data_gregoriana.day    mes_positivista_nome = meses_positivistas[mes_positivista]    return date(ano_positivista, mes_positivista, dia_positivista)def para_calendario_gregoriano(data_positivista):    """Converte uma data do calendário positivista para o calendário gregoriano."""    mes_gregoriano = data_positivista.month - 1    ano_gregoriano = data_positivista.year + 1791    dia_gregoriano = data_positivista.day    return date(ano_gregoriano, mes_gregoriano + 1, dia_gregoriano)class CalendarioConverterApp(QWidget):    def __init__(self):        super().__init__()        self.initUI()    def initUI(self):        self.setWindowTitle('Calculadora para o Calendário positivista')        # Widgets        self.dia_input = QLineEdit()        self.mes_input = QLineEdit()        self.ano_input = QLineEdit()        self.resultado_label = QLabel()        self.converter_btn = QPushButton('Converter')        self.converter_btn.clicked.connect(self.converter)        self.origem_radio_group = QButtonGroup()        self.gregoriano_radio = QRadioButton('Gregoriano para positivista')        self.positivista_radio = QRadioButton('Positivista para gregoriano')        self.origem_radio_group.addButton(self.gregoriano_radio)        self.origem_radio_group.addButton(self.positivista_radio)        # Layout        form_layout = QFormLayout()        form_layout.addRow('Dia:', self.dia_input)        form_layout.addRow('Mês:', self.mes_input)        form_layout.addRow('Ano:', self.ano_input)        origem_layout = QVBoxLayout()        origem_layout.addWidget(self.gregoriano_radio)        origem_layout.addWidget(self.positivista_radio)        destino_layout = QVBoxLayout()        destino_layout.addWidget(self.converter_btn)        destino_layout.addWidget(self.resultado_label)        vbox = QVBoxLayout()        vbox.addLayout(form_layout)        vbox.addLayout(origem_layout)        vbox.addLayout(destino_layout)        self.setLayout(vbox)        self.show()    def converter(self):        try:            dia = int(self.dia_input.text())            mes = int(self.mes_input.text())            ano = int(self.ano_input.text())            if self.origem_radio_group.checkedButton() == self.gregoriano_radio:  # Calendário de origem é gregoriano                data_gregoriana = date(ano, mes, dia)                data_positivista = para_calendario_positivista(data_gregoriana)                mes_positivista_nome = meses_positivistas[data_positivista.month - 1]                resultado = f"Data no calendário positivista:\nAno: {data_positivista.year}, Mês: {mes_positivista_nome} ({data_positivista.month}), Dia: {data_positivista.day}"            else:  # Calendário de origem é positivista                data_positivista = date(ano, mes, dia)                data_gregoriana = para_calendario_gregoriano(data_positivista)                mes_gregoriano_nome = meses_gregorianos[data_gregoriana.month - 1]                resultado = f"Data no calendário gregoriano:\nAno: {data_gregoriana.year}, Mês: {mes_gregoriano_nome} ({data_gregoriana.month}), Dia: {data_gregoriana.day}"            self.resultado_label.setText(resultado)        except ValueError:            self.resultado_label.setText("Digite valores válidos para dia, mês e ano.")if __name__ == '__main__':    app = QApplication(sys.argv)    converter_app = CalendarioConverterApp()    sys.exit(app.exec_())